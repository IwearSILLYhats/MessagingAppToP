// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String
  username        String
  password        String
  profile_img_url String?
  joined_date     DateTime @default(now())
  last_activity   DateTime @default(now())

  // Represents friendships where this user is the 'initiator'
  friends  Friendship[] @relation("UserFriends")
  // Represents friendships where this user is the 'recipient'
  friendOf Friendship[] @relation("FriendOfUser")
  Chat     Chat?        @relation(fields: [chatId], references: [id])
  chatId   String?
  Message  Message[]
}

model Friendship {
  id        String        @id @default(uuid())
  user      User          @relation("UserFriends", fields: [user_id], references: [id])
  user_id   String
  friend    User          @relation("FriendOfUser", fields: [friend_id], references: [id])
  friend_id String
  status    friend_status @default(PENDING) // e.g., PENDING, ACCEPTED, BLOCKED
  createdAt DateTime      @default(now())

  @@unique([user_id, friend_id]) // Ensures unique friendship records
}

model Chat {
  id       String    @id @default(uuid())
  title    String
  users    User[]
  messages Message[]
}

model Message {
  id          String   @id @default(uuid())
  author      User     @relation(fields: [user_id], references: [id])
  user_id     String
  content     String
  posted_date DateTime @default(now())
  image_url   String?
  Chat        Chat?    @relation(fields: [chatId], references: [id])
  chatId      String?
}

enum friend_status {
  PENDING
  ACCEPTED
  BLOCKED
}
